//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using src.libs.src.ctxs.meta.services.components;

public partial class MetaContext {

    public MetaEntity inputActionServiceEntity { get { return GetGroup(MetaMatcher.InputActionService).GetSingleEntity(); } }
    public InputActionServiceComponent inputActionService { get { return inputActionServiceEntity.inputActionService; } }
    public bool hasInputActionService { get { return inputActionServiceEntity != null; } }

    public MetaEntity SetInputActionService(src.libs.src.services.core.inputaction.IInputActionService newInstance) {
        if (hasInputActionService) {
            throw new Entitas.EntitasException("Could not set InputActionService!\n" + this + " already has an entity with ecscore.src.contexts.meta.services.components.InputActionServiceComponent!",
                "You should check if the context already has a inputActionServiceEntity before setting it or use context.ReplaceInputActionService().");
        }
        var entity = CreateEntity();
        entity.AddInputActionService(newInstance);
        return entity;
    }

    public void ReplaceInputActionService(src.libs.src.services.core.inputaction.IInputActionService newInstance) {
        var entity = inputActionServiceEntity;
        if (entity == null) {
            entity = SetInputActionService(newInstance);
        } else {
            entity.ReplaceInputActionService(newInstance);
        }
    }

    public void RemoveInputActionService() {
        inputActionServiceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public InputActionServiceComponent inputActionService { get { return (InputActionServiceComponent)GetComponent(MetaComponentsLookup.InputActionService); } }
    public bool hasInputActionService { get { return HasComponent(MetaComponentsLookup.InputActionService); } }

    public void AddInputActionService(src.libs.src.services.core.inputaction.IInputActionService newInstance) {
        var index = MetaComponentsLookup.InputActionService;
        var component = CreateComponent<InputActionServiceComponent>(index);
        component.instance = newInstance;
        AddComponent(index, component);
    }

    public void ReplaceInputActionService(src.libs.src.services.core.inputaction.IInputActionService newInstance) {
        var index = MetaComponentsLookup.InputActionService;
        var component = CreateComponent<InputActionServiceComponent>(index);
        component.instance = newInstance;
        ReplaceComponent(index, component);
    }

    public void RemoveInputActionService() {
        RemoveComponent(MetaComponentsLookup.InputActionService);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherInputActionService;

    public static Entitas.IMatcher<MetaEntity> InputActionService {
        get {
            if (_matcherInputActionService == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.InputActionService);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherInputActionService = matcher;
            }

            return _matcherInputActionService;
        }
    }
}
